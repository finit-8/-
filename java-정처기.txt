public static void main(String[] args){
  Set a = new HashSet();
 
  a.add(7)
  System.out.println(a);
 
  a.add(5)
  System.out.println(a);
 
  a.add(5)
  System.out.println(a);
 
  a.remove(5)
  System.out.println(a);
 
  System.out.println(a.size());  
 
} 
출력 : 






import java.util.(  );
 
public class Test {
 
  public static void main(String args[]){
    (   ) scan = new (   ) (System.in);
    int a = scan.nextInt();
    int b = scan.nextInt();
    System.out.printf("%d", a +b);
  
  }
}
2개의 정수를 입력받아 합을 출력하기 위해 괄호에 공통으로 들어갈 가장 적합한 코드 :




public class good {
	public static void main(String[] args){
    	int i = 3;
        int k = 1;
        switch (i) {
			case 0:
			case 1:
			case 2: 
			case 3: k = 0;
			case 4: k += 3;
			case 5: k -= 10;
			default: k--;
        }
        system.out.print(k);
     }
}
출력 : -8





class parent
	public void show(){
    	system.out.println("Parent");
    }
}

class Child extends Parent{
	public void show(){
    	system.out.println("Child");
    }
}

public class good{
	public static void main(String[] args){
    	Parent pa = ____  Child();
        pa.show();
    }
}










class good {
	public static void main (String[] args) {
    	int[]a = new int[8];
        int i=0; int n=10;
        while (  1.  ) {
        	a[i++] = (  2.  );
            n /= 2;
        }
        for(i=7; i>=0; i--){
            System.out.print(a[i]);
        }
     }
  }
[출력결과] : 00001010
1. 2.




public class good {
	public static void main(String[] args) {
    	int[][]a = new int[(1.)][(2.)];
        for(int i = 0; i <3; i++){
			for(int j=0; j < 5; j++){
				a[i][j] = j*3+(i+1);
				System.out.print(a[i][j]+" ");
        }
			System.out.println();
        }
    }
}
[출력결과] 
1 4 7 10 13
2 5 8 11 14
3 6 9 12 15 
1. 2.
   
   
   
  
  



class parent{
	public int compute(int num){
    	if(num <=1) return num;
        return compute(num-1) + compute(num-2);
    }
}
class Child extends parent {
 	public int compute(int num){
    	if(num<=1) return num;
        	return compute(num-1) + compute(num-3);				
    }
}
class good{
  	public static void main (String[] args){
    parent obj = new Child();
    System.out.print(obj.compute(4));
    }
}
출력 :






public class good {
	public static void main(String[] args){
		int i, j;
		for(j=0, i=0; i<=5; i++){
			j+=i;					
			System.out.print(i);	
			if(i==5){
				System.out.print("=");	
				System.out.print(j);		
			} else{
				System.out.print("+");
			}
	    }
	}
}




클래스 내에서 객체 생성 없이 사용할 수 있는 메소드로써 (	)에 들어갈 코드
public class Test {
   public static void main(String[] args){
      system.out.print(Test.check(1));
   }
   (    )  String check (int num) {
      return (num >= 0) ? "positive" : "negative";
   }
}
[출력결과]
positive





public class ovr1 {
	public static void main(String[] args){
    	ovr1 a1 = new ovr1();
        ovr2 a2 = new ovr2();
        System.out.println(a1.sun(3,2) + a2.sun(3,2));
    }
    int sun(int x, int y){
    	return x + y;
    }
}
class ovr2 extends ovr1 {
	int sun(int x, int y){
    	return x - y + super.sun(x,y);
    }
}
출력 :






class Connection {
	private static Connection _inst = null;
	private int count = 0;
	static public Connection get() {
		if(_inst == null) {
			_inst = new Connection();
			return _inst; 
		}
		return _inst;
	}
	public void count() { count ++; }
	public int getCount() { return count; }
}
public class testcon {
	public static void main(String[] args) {
		Connection conn1 = Connection.get();
		conn1.count();
		Connection conn2 = Connection.get();
		conn2.count();
		Connection conn3 = Connection.get();
		conn3.count();
		System.out.print(conn1.getCount());
	}
}
출력 : 







public class testco {
	public static void main(String[] args) {
		int a = 3, b = 4, c = 3, d = 5;
		if((a == 2 | a == c) & !(c > d) & (1 == b ^ c != d)) {
			a = b + c;
			if(7 == b ^ c != a) {
				System.out.println(a);
			} else {
				System.out.println(b);
			}
		} else {
			a = c + d;
				if(7 == c ^ d != a) {
					System.out.println(a);
				} else {
					System.out.println(d);
				}
		}
	}
}