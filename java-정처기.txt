public static void main(String[] args){
  Set a = new HashSet();
 
  a.add(7)
  System.out.println(a);
 
  a.add(5)
  System.out.println(a);
 
  a.add(5)
  System.out.println(a);
 
  a.remove(5)
  System.out.println(a);
 
  System.out.println(a.size());  
 
} 
출력 : 






import java.util.(  );
 
public class Test {
 
  public static void main(String args[]){
    (   ) scan = new (   ) (System.in);
    int a = scan.nextInt();
    int b = scan.nextInt();
    System.out.printf("%d", a +b);
  
  }
}
2개의 정수를 입력받아 합을 출력하기 위해 괄호에 공통으로 들어갈 가장 적합한 코드 :




public class good {
	public static void main(String[] args){
    	int i = 3;
        int k = 1;
        switch (i) {
			case 0:
			case 1:
			case 2: 
			case 3: k = 0;
			case 4: k += 3;
			case 5: k -= 10;
			default: k--;
        }
        system.out.print(k);
     }
}
출력 : -8





class parent
	public void show(){
    	system.out.println("Parent");
    }
}

class Child extends Parent{
	public void show(){
    	system.out.println("Child");
    }
}

public class good{
	public static void main(String[] args){
    	Parent pa = ____  Child();
        pa.show();
    }
}










class good {
	public static void main (String[] args) {
    	int[]a = new int[8];
        int i=0; int n=10;
        while (  1.  ) {
        	a[i++] = (  2.  );
            n /= 2;
        }
        for(i=7; i>=0; i--){
            System.out.print(a[i]);
        }
     }
  }
[출력결과] : 00001010
1. 2.




public class good {
	public static void main(String[] args) {
    	int[][]a = new int[(1.)][(2.)];
        for(int i = 0; i <3; i++){
			for(int j=0; j < 5; j++){
				a[i][j] = j*3+(i+1);
				System.out.print(a[i][j]+" ");
        }
			System.out.println();
        }
    }
}
[출력결과] 
1 4 7 10 13
2 5 8 11 14
3 6 9 12 15 
1. 2.
   
   
   
  
  



class parent{
	public int compute(int num){
    	if(num <=1) return num;
        return compute(num-1) + compute(num-2);
    }
}
class Child extends parent {
 	public int compute(int num){
    	if(num<=1) return num;
        	return compute(num-1) + compute(num-3);				
    }
}
class good{
  	public static void main (String[] args){
    parent obj = new Child();
    System.out.print(obj.compute(4));
    }
}
출력 :






public class good {
	public static void main(String[] args){
		int i, j;
		for(j=0, i=0; i<=5; i++){
			j+=i;					
			System.out.print(i);	
			if(i==5){
				System.out.print("=");	
				System.out.print(j);		
			} else{
				System.out.print("+");
			}
	    }
	}
}




클래스 내에서 객체 생성 없이 사용할 수 있는 메소드로써 (	)에 들어갈 코드
public class Test {
   public static void main(String[] args){
      system.out.print(Test.check(1));
   }
   (    )  String check (int num) {
      return (num >= 0) ? "positive" : "negative";
   }
}
[출력결과]
positive





public class ovr1 {
	public static void main(String[] args){
    	ovr1 a1 = new ovr1();
        ovr2 a2 = new ovr2();
        System.out.println(a1.sun(3,2) + a2.sun(3,2));
    }
    int sun(int x, int y){
    	return x + y;
    }
}
class ovr2 extends ovr1 {
	int sun(int x, int y){
    	return x - y + super.sun(x,y);
    }
}
출력 :






class Connection {
	private static Connection _inst = null;
	private int count = 0;
	static public Connection get() {
		if(_inst == null) {
			_inst = new Connection();
			return _inst; 
		}
		return _inst;
	}
	public void count() { count ++; }
	public int getCount() { return count; }
}
public class testcon {
	public static void main(String[] args) {
		Connection conn1 = Connection.get();
		conn1.count();
		Connection conn2 = Connection.get();
		conn2.count();
		Connection conn3 = Connection.get();
		conn3.count();
		System.out.print(conn1.getCount());
	}
}
출력 : 







public class testco {
	public static void main(String[] args) {
		int a = 3, b = 4, c = 3, d = 5;
		if((a == 2 | a == c) & !(c > d) & (1 == b ^ c != d)) {
			a = b + c;
			if(7 == b ^ c != a) {
				System.out.println(a);
			} else {
				System.out.println(b);
			}
		} else {
			a = c + d;
				if(7 == c ^ d != a) {
					System.out.println(a);
				} else {
					System.out.println(d);
				}
		}
	}
}
출력 : 






class A {
  int a;
  int b;
}
public class Main {
	static void func1(A m){
		m.a *= 10;
	}
	static void func2(A m){
		m.a += m.b;
	}
	public static void main(String args[]){
		A m = new A();
		m.a = 100;									
		func1(m);									
		m.b = m.a;									
		func2(m);									
		System.out.printf("%d", m.a);				
	}
}
출력 : 






class Car implements Runnable{
	int a;

	public void run(){
		system.out.println("message")
	}
}
public class Main{
	public static void main(String args[]){
		Thread t1 = new Thread(new ___());
		t1.start();
	}
}
출력 : 






public class Conv{ 
	public Conv(int a) {
		this.a = a;
	} 
	int func() {
		int b = 1; 
		for (int i=1; i<a; i++){ 
			b = a * i + b 			
		}
		return a + b;				
	}
	int a;
}
public static void main(String[] args){
	Conv obj = new Conv(3);
	obj.a=5; 
	int b = obj.func();
	system.out.print(obj.a + b);
	i
}






void main{ 
int []result = int[5];
int []arr = [77,32,10,99,50];
	for(int i = 0; i < 5; i++) {
		result[i] = 1;							
		for(int j = 0; j < 5; j++) {
			if(arr[i] < arr[j]) result[i]++;
		}										
	}
	for(int k = 0; k < 5; k++) {
		printf(result[k]);
	}
}
출력 : 






public class Soojebi {
	public static void main(String[] args) {
		int sum = fact(5);
		System.out.println(sum);
	}
	public static int fact(int n) {
		if(n <= 2) {
			return 1;
		} else {
			return fact(n-2) + fact(n-1);		
		}											
	}
}
출력 : 





class Soojebi {
		static private Soojebi instance = null;
		private int count = 0;
		static public Soojebi get(int x){
			if(instance == null) {
				instance = new Soojebi();
			}
			instance.count += x;
			return instance;
		}
		public void count(){count++;}
		public int getCount(){return instance.count;}
}
public class Soojebi2 {
	public static void main(String[] args) {
		Soojebi s1 = Soojebi.get(2);
		s1.count();						
		Soojebi s2 = Soojebi.get(3);
		s2.count();						
		System.out.println(s1.getCount());
	}
}





______ class Animal{
	______ void show();
}
class Dog extends Animal{
	void show(){
		System.out.print("dog");
	}
}
public class Soojebi {
	public static void main(String[] args) {
		Animal d = new Dog();
		d.show();
	}
}
출력결과 : dog






public class Soojebi {
	public static void main(String[] args) {
		int[] arr = {10, 30, 50, 70, 90};
		int i, max, min;
		max = min = arr[0];
		for(i=0; i<5; i++){
			if(_____ > max){
				max = arr[i];
			}
			if(_____ < min) {
				min = arr[i];
			}
		}
		system.out.printf("%d %d\n", max,min);
	}
}
출력 : 






다음 코드는 오류가 발생하는 코드이다. 원인은? 
class Parent{
	String name = "Parent";
	public Parent(String name){
		System.out.println("A");
	}
}
class Child extends Parent{
	public Child(String name){
		System.out.println("B");
	}
	void info(){
		System.out.println(name);
	}
}
public class Soojebi{
	public static void main(String[] args){
		Parent c = new Child("Soojebi");
		c.info();
	}
}






public class Soojebi{
	public static void main(String[] args){
		int i=0; sum=0;
		while(i<10){
			i++;			
			if(i%2 == 1)
				continue;
			sum += i;
		}
		System.out.print(sum);
	}
}
출력 :





public class Soojebi{
	public static void main(String[] args){
		Set h = new HashSet();
		h.add(2);
		System.out.print(h);
		h.add(1);
		System.out.print(h);
		h.add(1);
		System.out.print(h);
		h.remove(1);
		System.out.print(h);
		System.out.print(h.size());
	}
}
출력 : 
		
		
		
		
		
		
★★★		
public class Soojebi{
	static int func(int n){
		return n*9;
	}
	static int func(int a, int b){
		return a*b;
	}
	public static void main(String[] args){
		System.out.printf("%x", func(5)+func(2,3));
	}
}
출력 : 







★★★
public class Soojebi{
	public static void main(String[] args){
		int i, j=0, sum=0;
		for(i=1; i<=110; i++){
			if(i%4 == 0) {				
				sum += 1;			
				j=i;					
			}
		}
		System.out.print(i+j+sum);
	}
}
출력 :






★★★
class A{
	A(){
		this(10);
		System.out.print("A");
	}
	A(int x){System.out.print("B"+x);}
	void display(){System.out.print("C");}
}
class B extends A{
	B(){System.out.print("D");}
	B(String m){System.out.print("E");}
	void display(){System.out.print("F");}
}
public class Soojebi{
	public static void main(String[] args){
		A x = new A();
		x.display();
	}
}
출력 :






public class Soojebi{
	public static void main(String[] args){
		int[] a = {56, 4, 3, 65, 78};
		int temp;
		for(int i = 0; i < 1; i++){
			for(int j = 0; j < a.length-i-1; j++){
				if(a[j]>a[j+1]){
					temp = a[j];
					a[j] = a[j+1];
					a[j+1] = temp;
				}
			}
		}
		for(int i = 0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
	}
}
출력 : 






class Book1{
	String name = "Book1";
	void setName(String name){
		this.name = name;
	}
	String getName(){
		return name;
	}
}
class Book2 extends Book1{
	String name = "Book2";
	void setName(String name){
		super.name = name;
	}
	String getName(){
		return name;
	}
}
class Soojebi{
	public static void main(String[] args){
		Book1 a = new Book2();
		Book2 b = new Book2();
		a.setName("Book3");
		b.setName("Book4");
		System.out.print(a.getName());
		System.out.print(b.getName());
		System.out.print(a.name);
	}
}
출력 : 







★★★
class Parent {
    int x = 100;
    Parent() {
        this(500);
    }
    Parent(int x) {
        this.x = x;
    }
    int getX() {
        return x;
    }
}
class Child extends Parent {
    int x = 4000;
    Child() {
        this(5000);
    }
    Child(int x) {
        this.x = x;
    }
}
public class Main {
    public static void main(String[] args) {
        Child obj = new Child();
        System.out.println(obj.getX());
    }
}

abstact class Vehicle {
    String name;
    abstract public String getName(String val);
    public String getName() {
		return "Vehicle name: " + name;
    }
}
class Car extends Vehicle {
    public Car(String val) {
        name=super.name=val;
    }
    public String getName(String val) {
        return "Car name:" + val;
    }
    public String getName(byte val[]) {
        return "Car name:" + val;
    }
}
public class Main {
    public static void main(String[] args) {
    Vehicle obj = new Car("Spark");
    System.out.println(obj.getName());
    }
}

class Soojebi{
	void make(){
		System.out.println("Welcome to Soojebi");
	}
}
class Jebi extends Soojebi{
	void make(){
		System.out.println("Wow");
	}
	void make(String message){
		System.out.println("message");
	}
}
public class Soojebi2{
	public static void main(String[] args){
		Soojebi a = new Soojebi();
		Soojebi b = new Jebi();
		Jebi c = new Jebi();
		a.make();
		b.make();
		c.make();
		c.make("Hello");
	}
}
출력 :








class Parent {
    int compute(int num) {
        if(num <= 1)
            return num;
        return compute(num-1) + compute(num-2);
    }
}
class Child extends Parent {
    int compute(int num) {
        if(num <= 1)
            return num;
        return compute(num-1) + compute(num-3);
    }
}
public class main {
    public static void main(String args[]) {
        Parent obj = new Child();
        System.out.print(obj.compute(7));
    }
}
출력 : 







다음은 에러가 발생하는 코드이다. 발생하는 위치와 원인은?
class Person {
    private String name;
    public Person(String val) {
        name = val;
    }
    public static String get() {
    return name;
    }
    public void print() {
        System.out.println(name);
    }
}
public class main {
    public static void main(String[] args) {
        Person obj = new Person("Kim");
        obj.print();
    }
}





★★★
public class Soojebi{
	public static void main(String[] args){
		String str = "HelloSoojebiJava";
		String result = str.substring(0, 5).toLowerCase() + str.substring(5, 10).toUpperCase() + str.substring(10).replace('a', '@');
		System.out.println(result);
	}
}
출력 : 






★★★
import java.util.Arrays;
import java.util.List;
public class Soojebi{
	public static void main(String[] args){
		List<String> words = Arrays.asList("apple", "bird", "captain", "day");
		words.stream()
			.filter(w->w.contains("a") && w.length() > 5)			
			.map(w->w.toUpperCase().replace('A', '@'))				
			.forEach(w->System.out.print(w+" "));					
	}
}
출력 :






★★★
public class Soojebi{
	public static void main(String[] args){
		TreeSet set = new TreeSet();
		set.add(89);
		set.add(32);
		set.add(71);
		System.out.print(set.headSet(50));
		System.out.print(set.tailSet(50));	
	}
}
출력 : 
	
	
	
	

public class Soojebi{
	public static void main(String[] args){	
		int[] arr = {3, 4, 10, 2, 5};
		int temp;
		for(int i=0; i<=3; i++){
			for(int j=i+1; j<=4; j++){		   
				if(arr[i] < arr[j]){	
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;		
				}
			}							
		}
		for(int i=0; i<5; i++){
			System.out.print(arr[i] + " ");
		}
	}
}
출력 : 






★★★
interface A{
	void fn(String s);
}
class B implements A{
	public void fn(String s){
		System.out.print(s+"B");
	}
}
class C implements A{
	public void fn(String s){
		System.out.print("C"+s);
	}
}
public class Soojebi{
	public static void main(String[] args){
		A b = new B();
		A c = new C();
		B d = new B();
		String s1 = "Soo je bi";
		String[] s2 = s1.split(" ");
		int i = 0;
		b.fn(s2[i++]);		
		c.fn(s2[i++]);		
		d.fn(s2[i++]);		
	}
}
출력 : 







class A{
	int a;
	public A(int a){
		this.a=a;							
	}
	public void display(){
		System.out.println("a="+a);
	}
}
class B extends A{
	int a;
	public B(int a){
		super(a/2);
		this.a=a;							
	}
	public void display(){
		System.out.println("a="+a);			
	}
}
public class Soojebi{
	public static void main(String[] args){
		A a = new B(10);
		B b = new B(40);
		a.display();
		b.display();
		System.out.println(a.a + "" + b.a);			
	}
}
출력 : 







★★★
class A{
	public A(){
		System.out.print("A");
		method();
	}
	public void method(){
		System.out.print("B");
	}
}
class B extends A{
	public B(){
		System.out.print("C");
	}
	public void method(){
		System.out.print("D");
	}
}
class C extends B{
	int value = 10;
	public C(){
		System.out.print("E");
		method();
	}
	public void method(){
		System.out.print(value);
	}
}
public class Soojebi{
	public static void main(String[] args){
		C c = new C();
	}
}
출력 : 







public class Soojebi{
	public static void main(String[] args){	
		int[] arr = {3, 5, 4, 2, 1};
		int i=0;
		int temp=0;
		do{
			int j = i;
			do{
				if(arr[i] > arr[j]){
					temp = arr[i];
					arr[i] = arr[j];
					arr[j] = temp;
				}
				j++;
			} while (j<5);					
			i++;
		} while (i<4);
		for(int i=0; i<5; i++){
			System.out.printf(arr[i] + " ");
		}
	}
}
출력 : 







★★★
public class Soojebi{
	public static void main(String[] args){	
		List<String> list = new LinkedList<String>();
		list.add("Hello");
		list.add("Hello");
		list.add(1, "World");
		System.out.print(list);
	}
}
출력 : {Hello, World, Hello}







abstact class Soojebi{
	abstact String getName();
}
class Soojebi1 extends Soojebi{
	String getName(){
		return "soojebe1";
	}
}
class Soojebi2 extends Soojebi{
	String getName(){
		return "soojebe2";
	}
}
abstact class SuperSoojebiFactory{
	abstact Soojebi createSoojebi(String name);
}
class SoojebiFactory extends SuperSoojebiFactory{
	Soojebi createSoojebi(String name){
		switch(name){
		case "soojebe1":
			return new Soojebi1();
		case "soojebe2":
			return new Soojebi2();
		}
		return null;
	}
}
class SoojebiMain{
	public static void main(String[] args){
		SoojebiFactory sf = new SoojebiFactory();
		Soojebi s1 = sf.createSoojebi("Soojebi1");
		Soojebi s2 = sf.createSoojebi("Soojebi2");
		System.out.println(s1.getName() + s2.getName());
	}
}
출력 :







★★★
public class Main {
    public static void main(String[] args) {
        new Child();
        System.out.println(Parent.total);
    }
}
class Parent {
    static int total = 0;
    int v = 1;
    public Parent() {
        total += (++v);				
        show();    					
    }
    public void show() {
        total += total;
    }
}
class Child extends Parent {
    int v = 10;
 
    public Child() {
        v += 2;						
        total += v++;				
        show();						
    }
    @Override
    public void show() {			
        total += total * 2;			
    }
}
출력 : 







★★★
public class Main {
    public static void main(String[] args) {
        int[] data = {3, 5, 8, 12, 17};
        System.out.println(func(data, 0, data.length - 1));
    }
    static int func(int[] a, int st, int end) {						
        if (st >= end) return 0;
        int mid = (st + end) / 2;												
        return a[mid] + Math.max(func(a, st, mid), func(a, mid + 1, end));		
    } 
}
출력 : 








★★★
public class Main {
	public static void main(String[] args) {
		System.out.println(calc("5"));
	}
	static int calc(int value) {
		if (value <= 1) return value;
		return calc(value - 1) + calc(value - 2);
	}
	static int calc(String str) {
		int value = Integer.valueOf(str);
		if (value <= 1) return value;
		return calc(value - 1) + calc(value - 3);
	}
}








public class Main {
    public static void change(String[] data, String s){
        data[0] = s;
        s = "Z";
    }
    public static void main(String[] args) {
        String data[] = { "A" };
        String s = "B";
        change(data, s);
        System.out.print(data[0] + s);
    }
}
출력 : 








public class Main {
    static interface F {
        int apply(int x) throws Exception;
    }
    public static int run(F f) {
        try {
            return f.apply(3);
        } catch (Exception e) {
            return 7;
        }
    }
    public static void main(String[] args) {
        F f = (x) -> {
            if (x > 2) {
                throw new Exception();			
            }
            return x * 2;
        };
        System.out.print(run(f) + run((int n) -> n + 9));
    }
}
출력 : 






public class Main{
    public static class Parent {
        public int x(int i) { return i + 2; }
        public static String id() { return "P";}
    }
    public static class Child extends Parent {
        public int x(int i) { return i + 3; }
        public String x(String s) { return s + "R"; }
        public static String id() { return "C"; }
    }
    public static void main(String[] args) {
 
        Parent ref = new Child();
        System.out.println(ref.x(2) + ref.id());
    }
}
출력 : 





★★★
public class Main{
    public static class Parent {
        public int x(int i) { return i + 2; }
        public static String id() { return "P";}  
    }
    public static class Child extends Parent {
        public int x(int i) { return i + 3; }
        public String x(String s) { return s + "R"; }
        public static String id() { return "C"; }
    }
    public static void main(String[] args) {
        Parent ref = new Child();
        System.out.println(ref.x(2) + ref.id());
    }
}
출력 :






★★★
public class Main{
    public static class BO {
        public int v;
        public BO(int v) {
            this.v = v;
        }
    }
    public static void main(String[] args) {
        BO a = new BO(1);
        BO b = new BO(2);
        BO c = new BO(3);
        BO[] arr = {a, b, c};
        BO t = arr[0];				
        arr[0] = arr[2];			
        arr[2] = t;					
        arr[1].v = arr[0].v;		
        System.out.println(a.v + "a" + b.v + "b" + c.v);
    }
}
출력 : 