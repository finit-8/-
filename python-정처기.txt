lst = [1,2,3] 
dst = {i : i* 2 for i in lst} 				
s = set(dst.values()) 						
lst[0] = 99 dst[2]=7 						
s.add(99) 								
print(len(s & set(dst.values())))			
출력 : 



a={'일본','중국','한국'}
a.add('베트남')
a.add('중국')
a.remove('일본')
a.update(['홍콩','한국','태국'])
print(a)
출력 : 

파이썬의 set, list, tuple은 자료형 특성이 달라요.

자료형	순서		중복		변경가능성		생성예시
set		❌없음	❌불가	✅가능		{'a','b'} or set()
list	✅있음	✅가능	✅가능			['a','b']
tuple	✅있음	✅가능	❌불가능			('a','b')



lol = [[1,2,3],[4,5],[6,7,8,9]]
print(lol[0])
print(lol[2][1])
	for sub in lol:
   	for item in sub:
        	print(item, end = '')
      	print()
출력 : 






class good :
	li = ["seoul", "kyeonggi","inchon","daejeon","daegu","pusan"]
g = good()
str01 = ''
for i in g.li:
	str01 = str01 + i[0]
print(str01)
출력 : 






a = 100
result = 0
for i in range(1,3);
   result = a >> i
   result = result + 1
print(result)
출력 : 






a,b = 100, 200 
print(a==b)
출력 : 





def exam(num1, num2=2):
print('a=', num1, 'b=', num2)
exam(20)





	 0123456789 10 11 12 13 14 15 16
a = "REMEMBER N  O V  E  M  B  E  R"
b = a[:3] + a[12:16];
c = "R AND %s" % "STR";
print(b+c)
출력 : 





TestList = [1,2,3,4,5]
TestList = list(map(lambda num : num + 100, TestList)))
print(TestList)
출력 : 





a = ["123", "456", "789"]
str = "0"
for i in a:
	str = i[1] + str + i[2]
print(str)
출력 :






i=0
sum=0
while i < 7:
	i = i+1
	if i % 3 == 0:
		sum -= i
	elif i % 3 == 1:
		sum += i
	else:
		sum *= i
print(sum)






a = "%s%s" % ("soojebi"[0:2], "soojebi"[3:4])
b = 1111
print("%s%d" % (a*2, b*2))
출력 :






def soojebi(begin, diff, n):
	cnt=1
	ret=begin				
	while true:
		cnt+=1				
		ret*=diff			
		if cnt == n:		
			return ret
print(soojebi(1, 3, 4))
출력 :




★★★
class A:
	x = "ABC"
	def __init__(self, x):
		self.x = self.x + x
	def fn(self, x):
		print("{0}{1}".format(self.x, x))
		
class B(A):
	x = "XYZ"
	def fn(self, x, y):
		print("{0}{1}{2}".format(self.x,x,y))

a = A("HI")				
a.fn("J")				
b=B("ST")				
b.fn("UV", "W")			







x = [5, 4, 3, 2, 1]
x = List(map(lambda num: num + 100 if num % 2 == 0 else num * 2, x))
print(x)





★★★
x = [97, 98, 0]
print(all(x))			
print(any(x))			
print(chr(x[1]))		
print(divmod(5,2))		
출력 : 






★★★
x = [1, 2, 3, 4, 5, 6, 7]
print(x.pop())
print(x.pop(-3))
print(x.pop(2))
출력 : 






try:
	x = 4/2
except ZeroDivisionError:
	print("A")
else:
	print("B")
finally:
	print("C")
출력 :






밑줄에 들어갈 코드는?
print("파이썬 입출력에 대한 문제입니다.")
num1, num2 = input()._____()
num1 = int(num1)
num2 = int(num2)
print(num1,num2)
num3 = num1 + num2
print(num1 + " + "  + num2 + " = " + num3)
	(※ 입력값은 2와 3이다.)
출력 결과 : 파이썬 입력출에 대한 문제입니다.
			2 3
			2 + 3 = 5





★★★
def fn():
	print('Hello')
	return
	print('Python')
print(fn())
출력 :
class A:
	def fn(self):
		print("A")
class B(A):
	def fn(self):
		pass
class C(A):
	def fn(self):
		print("B")
b=B()
c=C()
b.fn()
c.fn()
출력 : 






def fn(*args):
	total = 0
	for num in args:
		total += num
	return total
print(fn(1,2))			
print(fn(1,2,3,4))		
출력 : 





★★★
print(type(1.0)==type(1))
print(type((1, 2, 3))==type({1, 2, 3}))
print(type([1, 2, 3])==type(List()))
print(type("ABC")==type('A'))
출력 : 





★★★
a = [10, 20, 30, 40, 50, 60, 70, 80, 90]
	 0 	 1	 2	 3	 4	 5	 6	 7	 8
	-9	-8	-7	-6	-5	-4	-3	-2	-1
print(a[-2:-5:1])			
print(a[-9:-7:1])			
print(a[0:2:1])				
print(a[7:4:-1])			
print(a[-2:-5:-1])			
print(a[-2: :-1])			
print(a[ :-5:-1])			
print(a[ : :-1])			
출력 : 





★★★
class Person:
	def info(self, num):
		for i in range(1, 10):
			num += i			
		print(num, end='')		
class Student(Person):
	def info(self, num):
		super().info(num)
		print(num, end='')		
a = Student()
a.info(30)
출력 : 





★★★
def soojebi(num):
	if num < 2:
		print(num, end='')
	else:
		soojebi(num//2)
		print(num%2, end='')
soojebi(6)
출력 : 






def soojebi():
	a = (1, 2, 3, [4, 5], 6)
	a[3].append(7)
	return a
result = soojebi()
print(result)
출력 :





★★★
아래 빈칸의 코드는?
class Soojebi:
	____ setter(self, a):
		self.a = a
	____ getter(self):
		return self.a
a = Soojebi()
a.setter(5)
print(a.getter())
출력결과 : 5






a = ["Hello", "Python", "World"]
for i in a:
	print("abc")
출력 :







★★★
class Node:
    def __init__(self, value):
        self.value = value
        self.children = []
def tree(li):
    nodes = [Node(i) for i in li]
    for i in range(1, len(li)):
        nodes[(i - 1) // 2].children.append(nodes[i])
    return nodes[0]
def calc(node, level=0):
    if node is None:
        return 0
    return (node.value if level % 2 == 1 else 0) + sum(calc(n, level + 1) for n in node.children)
li = [3, 5, 8, 12, 15, 18, 21]
root = tree(li)
print(calc(root)) 
 
출력 : 




★★★
lst = [1,2,3]
dst = {i : i* 2 for i in lst}			
s = set(dst.values())					
lst[0] = 99 					
dst[2]=7								
s.add(99)								
print(len(s & set(dst.values())))	