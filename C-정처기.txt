#include <stdio.h>
void main(){
	float a = 7.9;
	printf("%f\n", a);
	printf("%.3f\n", a);
	printf("%6.2f\n", a);
}




#include <iostream>
using namespace std;
void main(){
	char a = 'A';
	int b = 7;
	cout << a << endl << b;
}





#include <stdio.h>
void ary(int a[]){
  int temp;
  for(int i=0;i<4;i++)	
    for(int j=0;j<4-i;j++)
      if(a[j]>a[j+1]){
        temp=a[j];
        a[j]=a[j+1];
        a[j+1]=temp;
      }
}
 int main() {
   int a[]={85, 75, 50, 100, 95};
   ary(a);
   for(int i=0;i<5;i++)
     printf("%d",a[i]);
}






#include <iostream>
print Value{
  a,
  b,
  c = 7,
  d
};  
 
void main(){
  print Value value;
  value = d;
  std::cout << value;  
}







#include <stdio.h>
struct stName {
    char nael[12];
    int os, db, hab, hhab;
};
int main() {
    struct stName st[3] = { {"stName1", 95, 88}, {"stName2", 84, 91}, {"stName3", 86, 75} };
    struct stName* p;
    p = &st[0];
 
    (p + 1)->hab = (p + 1)->os + (p + 2)->db;
    (p + 1)->hhab = (p + 1)->hab + p->os + p->db;
 
    printf("%d", (p + 1)->hab + (p + 1)->hhab);
}






#include <stdio.h>
void main(){
  int a[5] = {3,1};
  int i;
 
  for(i=0; i<5; i++)
    printf("%d\n", a[i]);
}






#include <stdio.h>
int main() {
    struct ary {
        char name[10];
        int age;
    } a[] = { {"Kim", 28}, {"Lee", 38}, {"Park", 42}, {"Choi", 31} };
 
    struct ary *p;
    p = a;
    p++;
    printf("%s\n", p->name);
    printf("%d\n", p->age);
}
출력 :






#include <stdio.h>
main(){
  char inputData [50];
  scanf("%s", inputData );
  printf("%.4s", inputData );
  printf("%3.2s", inputData );
}
입력 : Hello, World
출력 :
 







#include <stdio.h>
main(){
 
  float a = 3.45678f;
  double b = 0.0561214;
  (     )
  
출력 : [a]=3.46 / [b]=5.612e-02
괄호안에 입력은? (단, 한 개의 식으로 작성)










#include <stdio.h>
main(){
 
  int i, j;
  scanf("%o#x", &i, &j);
  printf(w"%d %d", i, j)
  
입력 : 15#22
출력은 ?
 
 
 
 
 
 
 
 #include <stdio.h>
 
int main() {
    int ary[3];
    int s = 0;
 
    *(ary + 0) = 1;					==> 
    ary[1] = *(ary + 0) + 2;		==> 
    ary[2] = *ary + 3;				==> 
 
    for (int i = 0; i < 3; i++)
        s = s + ary[i];				==> 
 
    printf("%d", s);				==> 
}
출력:






#include <stdio.h>
main(){
  int i = 5, j = 5, k = 20;
  i /= j;		
  j -= i;		
  k %= j;		
  printf("%d, %d, %d\n", i, j, k);

}
출력:





#include <stdio.h> 
#include <stdlib.h> 
struct node { 
	int p; 
	struct node* n; 
};
 
int main() { 
	struct node a = {1, NULL}; 
	struct node b = {2, NULL}; 
	struct node c = {3, NULL}; 
	
	a.n = &b; b.n = &c; c.n = NULL; 					
	c.n = &a; a.n = &b; b.n = NULL; 					
	struct node* head = &c; 
	printf("%d %d %d", head->p, head->n->p, head->n->n->p); 		
	return 0; 
}
출력: 





#include <stdio.h>
void main(){
	int i,j;
	int temp;
	int a[5] = {75,95,85,100,50};

	for(i=0; i<4; i++){	
		for(j=0; j<4-i; j++){
			if(a[j] > a[j+1]){			
				temp=a[j];
				a[j] = a[j+1];
				a[j+1] = temp;
			 }
		   }
		}
		
	for(i=0; i<5; i++){
		printf("%d", a[i]);
	}
}
출력 : 
  
  
  


https://chatgpt.com/c/68eee239-0314-8324-8deb-671124bca62c
#include <stdio.h> 
#include <stdlib.h>   
struct node {     
	char c;     
	struct node* p; 
};   

struct node* func(char* s) {     
	struct node* h = NULL, *n;          							
	while(*s) {         
		n = malloc(sizeof(struct node));         
		n->c = *s++;         
		n->p = h;         
		h = n;    
	}          
	return h; 
}   

int main() {     
	struct node* n = func("BEST");          
	while(n) {         						
		putchar(n->c);         				
		struct node* t = n;         
		n = n->p;         
		free(t);     
	}          
	return 0; 
}
			
	
	



int main(){
   int res;
   res = mp(2,10);
   printf("%d",res);
   return 0;
}
int mp(int base, int exp) {
   int res = 1;
   for(int i=0; i < exp; i++){
      res = res * base;							
   }
   return res;
}
출력 : 







int main(){
	int ary[3];
	int s = 0;
	*(ary+0)=1;						
	ary[1] = *(ary+0)+2;			
	ary[2] = *ary+3;				
	for(int i=0; i<3; i++){
	  s=s+ary[i]					
	}
	print("%d",s);
}
출력 : 





#include <stdio.h>
int main(){
	int *arr[3];								
	int a = 12, b = 24, c = 36;
	arr[0] = &a;								
	arr[1] = &b;
	arr[2] = &c;
	printf("%d\n", *arr[1] + **arr + 1);
}
출력 :





#include <stdio.h>
struct jsu {
  char name[12];
  int os, db, hab, hhab;
};
int main(){
	struct jsu st[3] = {{"데이터1", 95, 88}, 
						{"데이터2", 84, 91}, 
						{"데이터3", 86, 75}};
	struct jsu* p;
	p = &st[0];
	(p + 1)->hab = (p + 1)->os + (p + 2)->db;		
	(p + 1)->hhab = (p+1)->hab + p->os + p->db;		
	printf("%d\n", (p+1)->hab + (p+1)->hhab);		
}
출력 : 






#include <stdio.h>
int main() {
  int number = 1234;
  int div = 10;
  int result = 0;
  while (number ( 1 ) 0) {						
  
    result = result * div;							
    result = result + number ( 2 ) div;				
    number = number ( 3 ) div;						
  
  }
 
  printf("%d", result);
return 0;
}






#include <stdio.h> 
int isPrime(int number) { 
	int i; 
	for (i=2; i<number; i++) { 
		if (number % i == 0) return 0; 
	} 
	return 1; 
} 
int main(void) { 
	int number = 13195, max_div=0, i; 
	for (i=2; i<number; i++) 
		if (isPrime(i) == 1 && number % i == 0) max_div = i; 
	printf("%d", max_div); 
	return 0; 
}
출력 : 







#include <stdio.h>
int len(char *p);
int main(){
	char *p1 = "2022";
	char *p2 = "202207";  
	int a = len(p1);
	int b = len(p2);
	printf("%d", a + b);
}
int len(char *p){				
	int r = 0;
	while(*p != '\0'){
		p++;
		r++;
	}
	return r;
}
출력 : 






#include <stdio.h>
int main(int argc, char *argv[]) {
	int a[4] = {0, 2, 4, 8};
	int b[3] = {};
	int i = 1;
	int sum = 0;
	int *p1;
	for (i; i<4; i++) {
		p1 = a + i;						
		b[i-1] = *p1 - a[i-1];			
		sum = sum + b[i-1] + a[i];		
	}
	printf("%d", sum);
	return 0;
}
출력 : 






int n;
int k;
int s;
int el = 0;
  for(n=6; n<=30; n++){
    s=0;
    k=n/2;							
    for(int j=1; j<=k; j++){		
      if(n%j==0){				
        s=s+j;				
      }
    }
    if(s==n){					
		el++;						
    }
  }
  printf("%d", el);
  
  
  
  
  
  
#include <stdio.h>
int main(){
	int a[3][3] = {1,2,3,4,5,6,7,8,9};
	int *p = a[1]+2;					
	int *q = &a[0][1];									
	printf("%d", p[1]);					
	printf("%d", q[2]);					
	return 0;
}





#include <stdio.h>
int add(int i, int j) {
	return i+j;
}
int sub(int i, int j) {
	return i-j;
}
int main(){
	int(*pf)(int, int);
	___1___;
	printf("%d", pf(5,4));		
	___2___;
	printf("%d", pf(5,4));
	return 0;
}
출력결과 : 91







#include <stdio.h>
int main(){
	int a = 30, b = 15;
	printf("%d", a&b);			
	printf("%d", a|b);		
	return 0;
}




#include <stdio.h>
void main(){
	char *p = "KOREA"
    printf("%s\n" , p);				
    printf("%s\n" , p+3);			
    printf("%c\n" , *p);			
    printf("%c\n" , *(p+3));		
    printf("%c\n" , *p+2);
}
#include <stdio.h>
int main(){
	char a[6] = "hello";
	printf("%s", a+2);			
	printf("%c", a[1]+2);		
	printf("%c", *a+1);			
	printf("%c", *(a+1));		
	printf("%c", a[1]);			
	return 0
}
#include <stdio.h>
int main() {
    char arr[7] = "python";
    char ch = 'a';
    printf("%s\n", arr+3);			
    printf("%c\n", arr[2] + 2);
    printf("%c\n", *arr + 3);		
    printf("%c\n", *(arr+4));
    printf("%c\n", ch + 5);
    return 0;
}
★★★
#include <stdio.h>
#include <String.h>
int main(int argc, char *argv[]){
	char str1[11] = "ABCDE";
	char str2[6] = "12345";
	char* p1 = str1+1;			
	char* p2 = str2+3;			
	str1[1]=p2[-2];				
	str2[3]=p1[1];				
	strcat(str1, str2);			
	printf("%s", p1+2);			
	return 0;
}
★★★★★
#include <stdio.h>
#include <string.h>
void fn(char* str){
	char t;
	int len = strlen(str);							
	char* p1 = str;									
	char* p2 = str + len - 1;						
	while(p1<p2){
		if(*p1 >= 'A' && *p1 <= 'Z'){
			*p1 = *p1 + ('a' - 'A');						
		}
		else if(*p1 >= 'a' && *p1 <= 'z'){								
			*p1 = *p1 - ('a' - 'A');											
		}
		t = *p1;									
		*p1 = *p2;									
		*p2 = t;									
		p1++;										
		p2--;										
	}				
}
int main(){
	char str[100] = "Soojebi";
	int len, i;
	fn(str);
	len = strlen(str);								
	for(i=1; i<len; i+=2){							
		printf("%c", str[i]);						
	}
	return 0;
}
출력 :
★★★
#include <stdio.h>
void fn(char *str){
	int hash[256] = {0};
	int index = 0, i;
	for(i=0; str[i]; i++){			
		if(hash[str[i]] == 0){		
			hash[str[i]]++;			
			str[index++] = str[i];	
		}							
	}											
	str[index] = '\0';
}
int main(){
	char str[] = "banana";
	fn(str);
	printf("%s\n", str);
	return 0;
}
출력 : 






#include <stdio.h>
struct p{
	char name;
	int s;
	int w;
	float p;
};
int main(){
	struct p x[3] = {{'A', 3, 2}, {'B', 10, 7}, {'C', 7, 3}};
	struct p temp;
	int i, j;
	for(i=0; i<3; i++)
		x[i].p = (x[i].w + x[i].s) / (float)(x[i].w);			
	for(i=0; i<2; i++){
		for(j=0; j<2-i; j++){
			if(x[j].p < x[j+1].p){								
				temp = x[j];
				x[j] = x[j+1];
				x[j+1] = temp;
			}
		}
	}
	for(i=0; i<3; i++)
		printf("%c", x[i].name);									
	return 0;
}






#include <stdio.h>
int Soojebi(int base, int exp) {
	int i, result = 1;
	for(i=0; i<exp; i++)
		result *= base;
	return result;
}
int main(){
	printf("%d", Soojebi(2,10));
	return 0;
}
출력 : 






#include <stdio.h>
int main() {
	int i, j;
	for(i=1; i<3; i++){
		for(j=1; j<=i; j++){
			switch((i+j)%2){
			case 0:
				printf("%d", i+j);
				break;
			case 1:
				printf("%d", i-j);
			}
		}
	}
	return 0;
}
출력 : 





★★★
#include <stdio.h>
void fn(int *a, int b){
	int temp = 0;
	temp = *a;								
	*a = b;									
	b = temp+1;								
}
int main(){
	int a = 10, b = 5;
	fn(&a, b);								
	printf("%d %d\n", a, b);				
	return 0;
}
출력 : 

#include <stdio.h>
char* fn*(char* p){							
	p++;									
	return p;
}
int main(){
	char a[] = "abcd";						
	char* p = a;							
	printf("%s\n", fn(p));					
	printf("%s\n", p);						
	return 0;
}
출력 : 







#include <stdio.h>
#include <String.h>
int main(){
	char f[6] = "549+*";
	char s[6] = "";
	int i, p = -1;
	for(i=0; i<strlen(f); i++){
		switch(f[i]){
		case '+':
			s[p-1] = s[p] + s[p-1];		
			p--;						
			break;
		case '*':
			s[p-1] = s[p] * s[p-1];		
			p--;						
			break;
		default:
			s[++p] = f[i] - '0';		

		}
	}
	printf("%c", s[0]);					
	return 0;
}
출력 : 







정수 1209의 각 자릿수의 합을 구하는 코드이다. 빈 칸에 들어갈 코드는? 
#include <stdio.h>
int main(){
	int x, t=0;
	for(x=1209; x_____0; x_____10){
		t+=x%10;
	}
	printf("%d", t);
	return 0;
}
출력결과 : 12







#include <stdio.h>
int main(){
	int i=2;
	int sum=0;
	for( ; i<4; ){
		switch(i%2){
		case 0:
			sum+=i;		
		default:
			sum+=i;		
		}
		i+=3;			
	}
	printf("%d", sum);	
	return 0;
}
출력 :
		
		
		




#include <stdio.h>
int Soojebi(int num) {			
	int i;
	for(i=2; i<num; i++){
		if(num % i == 0)		
			return 0;
	}
	return 1;
}
int main(){
	int num=7, cnt=0, i;
	for(i=2; i<num; i++)
		cnt += Soojebi(i);
	printf("%d\n", cnt);
	return 0;
}
출력 : 






★★★
#include <stdio.h>
int fn(int x){
	int i, sum;
	for(i=0, sum=1; i<x; ++i, sum *= i);			
		return sum;
}
	sum=1;
	while(i<x){					
		i++;					
		sum *= i;			
	}		
int main(){
	printf("%d", fn(4));
	return 0;
}
출력 : 





1~6사이의 숫자를 10번 임의 생성하여 각 숫자가 몇번 발생했는지 hist배열에 저장 출력하는 코드로, 빈칸 완성
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int main(){
	int hist[6] = {0, };
	int n, i=0;
	srand(time(NULL));
	
	do{
		i++;
		n = rand()%6+1;					
		hist[____] += 1;				
	} while(i<10);
	
	for(i=0; i<6; i++)
		printf("hist[%d] = %d\n", i+1, ____);
	return 0;
}








#include <stdio.h>
int main(){
	int i, j;
	int sum = 0;
	int arr[3][3];
	
	for(i=0; i<3; i++){
		for(j=0; j<3; j++){
			arr[i][j] = i+j;		
										
			if(i%2 == 0){
				sum += arr[i][j];		
			}
			else{
				sum -= arr[i][j];		
			}
		}
	}
	printf("%d", sum);
}
출력 : 






#include <stdio.h>
struct Soojebi{
	int x;
	int j;
};
int main(){
	struct Soojebi p1 = {1, 2};
	struct Soojebi p2 = {3, 4};
	struct Soojebi *p3 = &p1;
	int result = p3->x + p3->y + p2.y;
	printf("%d\n", result);
	return 0;
}
출력 :






★★★
#include <stdio.h>
int main(){
	char x[3] = "Hi", i=0;
	for( ;x[i]; )
		printf("%d", x[++i]);
	return 0;
}
출력 :






#include <stdio.h>
int main(){
	int a = 1, b = 3;
	switch(++a + b){
	case 3 : printf("A");
	case 4 : printf("B");
		break; 
	case 5 : printf("C");
	default : printf("E");
	}
	return 0;
}
출력 : 







★★★
#include <stdio.h>
int main(){
	int x[3][2][26] = {0};
	char y[3][7] = {"Apple", "Banana", "Camera"};
	int i, j, k;
	
	for(i=0; i<3; i++){											
		for(j=5; j>=0; j--){									
			if(y[i][j] >= 'A' && y[i][j] <= 'Z'){				
				x[i][0][y[i][j]-'A']++;							
			} else(y[i][j] >= 'a' && y[i][j] <= 'z'){			
				x[i][1][y[i][j]-'a']++;							
		}	
	}
	for(i=0; i<3; i++){
		for(j=0; j<2; j++){
			for(k=0; k<26; k++){
				if(x[i][j][k] >= 2){
					printf("%d%d%d\n", i, j, k);				
				}
			}
		}
	}
	return 0;
}
출력 : 







값을 10개 입력받아 가장 작은 값을 출력하는 코드, 빈 칸에 알맞는 코드는?
#include <stdio.h>
int main(){
	int num[10];
	int min = 9999;
	int i;
	for(int i=0; i<10; i++){
		scanf("%d", &num[i]);			
	}
	for(int i=0; i<10; i++){			
		if(min > _____){				
			min = num[i];
		}
	}
	printf("%d", min);
	return 0;
}







★★★
#include <stdio.h>
int main(){
	char x[100]="";
	int i;
	for(int i=0; i<99; i++){
		x[i] = i;				
	}
	x['B']+=1;					
	x['A']+=x['B']-'B';			
	x['D']+=('g'-'a');			
	x['G'+1]=0;					
	printf("%s", x+'A');		
	return 0;
}
출력 :








★★★
#include <stdio.h>
typedef struct{
	int acc;
	double bal;
}Acc;
double fn(double b, int y){						
	int i;
	double r = 1.0;
	for(i=0; i<y; i++){
		r*=b;
	}
	return r;									
}
void init(Acc *a, int x, double y){				
	a->acc = x;									
	a->bal = y;									
}
void A(Acc *a, double en){										
	a->bal += (en > 0 && en < a->bal) ? -en : en;				
}
void B(Acc *a){													
	a->bal *= fn((1+0.1), 1);									
}
int main(){
	Acc ba;										
	init(&ba, 200, 100.0);						
	A(&ba, ba.bal);								
	B(&ba);										
	printf("%d and %.2f", ba.acc, ba.bal);		
	return 0;
}
출력 : 








#include <stdio.h>
int main(){
	int i, j;
	int temp;
	int a[5] = {14, 22, 53, 45, 1};
	for(i=0; i<2; i++){								
		for(j=0; j<4-i; j++){						
			if(a[j] > a[j + 1]){					
				temp = a[j];
				a[j] = a[j + 1];
				a[j + 1] = temp;
			}
		}
	}
	for(i=0; i<3; i++){				
		printf("%d", a[i]);
	}
}
출력 : 







★★★
입력값이 54321일 경우 출력값이 43215로 출력되도록 빈칸 코드 입력
int main(void) {
    int n[5];
    int i;
    for (i = 0; i < 5; i++) {
        printf("숫자를 입력해주세요 : ");
        scanf("%d", &n[i]);					
    }
    for (i = 0; i < 5; i++) {
        printf("%d", (______));				
    }
  return 0;
}







★★★
#include<stdio.h> 
#include<stdib.h> 
char n[30];
char *test() {
    printf(입력하세요 : );
    gets(n);
    return n;
} 
int main()
{
    char * test1;
    char * test2;
    char * test3;
 
    test1 = test();
    test2 = test();
    test3 = test();
 
    printf(%s\n,test1);
    printf(%s\n,test2);
    printf(%s,test3);
}
출력 : 







★★★	
#include <stdio.h>
#define MAX_SIZE 10
int isWhat[MAX_SIZE];
int point= -1;
int isEmpty() {
    if (point == -1) return 1;
    return 0;
}
int isFull() {
    if (point == 10) return 1;
    return 0;
}
void into(int num) {
    if (point >= 10) printf("Full");
    else isWhat[++point] = num;
}
int take() {
    if (isEmpty() == 1) printf("Empty");
    else return isWhat[point--];
    return 0;
}
int main(int argc, char const *argv[]){
    int e;
    into(5); into(2);
    while(!isEmpty()){
        printf("%d", take());
        into(4); into(1); printf("%d", take());
        into(3); printf("%d", take()); printf("%d", take());
        into(6); printf("%d", take()); printf("%d", take());
    }

    return 0;
}
출력 : 








★★★
#include <stdio.h>
int test(int n) {
    int i, sum = 0;
    for (i = 1; i <= n / 2; i++){
        if (n % i == 0)
        sum += i;
    }
    if (n == sum) 
        return 1;
    return 0;
}
int main(){
    int i, sum=0;
    for (i = 2; i <= 100; i++){ 
        if (test(i))
        sum += i;
    }
    printf("%d ", sum); 
    return 0;
}








#include
int f(int n) {
    if(n<=1) return 1;
    else return n*f(n-1);
}
int main() {
    printf("%d", f(7));
}





★★★
#include <stdio.h>
int main(){
	int a[3][2] = {{1, 2}, {3, 4}, {5, 6}};
	int *p = a[1];
	printf("%d\n", *a[1]);			
	printf("%d\n", **(a+2));		
	printf("%d\n", *(p+1));			
	printf("%d\n", *p[-1]);			
	return 0;
}
출력 : 







★★★
#include <stdio.h>
#include <ctype.h>
#include <string.h>
int fn(char* p, char* pResult){
	int i;
	for(i=0; p[i]!='\0'; i++){
		if(isupper(p[i]))
			pResult[i] = (p[i]-'A'+5) % 26 + 'A';				
		else if(islower(p[i]))
			pResult[i] = (p[i]-'a'+10) % 26 + 'a';
		else if(isdigit(p[i]))
			pResult[i] = (p[i]-'0'+3) % 10 + '0';
		else if(! (isupper(p[i]) || islowwer(p[i])\ || isdigit([p]i])))
			pResult[i] = p[i];
	}
	pResult[i] = '\0';
	return 1;
}
int main(){
	char* p = "ABC";
	char result[8];
	fn(p, result);
	printf("%s\n", result);
	return 0;
}
출력 :







★★★
#include <stdio.h>
struct Node {
	int v;
	struct Node* left;
	struct Node* right;
};
void fn(struct Node* node){
	if(node == NULL) return;
	printf("%d", node->v);	
	fn(node->left);			
	fn(node->right);		
}
int main(){
	struct Node a[4] = {{1, NULL}, {2, NULL}, \{3, NULL}, {4, NULL}};
	a[0].left = &a[1];		
	a[0].right = &a[2];		
	a[1].left = &a[3];		
	fn(&a[0]);			
	return 0;
}
출력 : 







★★★
#include <stdio.h>
int main(){
	int i = 0;
	int find_num = 15;
	int find_flag = 0;
	int arr[10];
	for(i=0; i<10; i++){
		arr[i] = i+10;				
	}
	while(i<10){					
		if(arr[i] == find_num){
			find_flag = 1;
			break;
		}
		i++;						
	}
	if(find_flag == 0){
		printf("not found %d", find_num);
	}
	else{
		printf("found %d", arr[i]);
	}
	return 0;
}
출력 : 






★★★
#include <stdio.h>
int main(){
	int i = 2;
	while(--i){
		printf("%d", i);
	}
	return 0;
}
출력 : 





★★★
#include <stdio.h>
int main(){
	int a = 0x6C, b=071;
	printf("%d %d", a | b, a & b);
	return 0;
}

#include <stdio.h>
int main(){
    int a = 0x55;   
    int b = 0123;   
    printf("%d %d", ~a, a ^ b);
    return 0;
}
출력 : 

#include <stdio.h>
int main(){
    int a = 0x0F;  
    int b = a << 3; 
    int c = 0170;
    printf("%d %d", b, c);
    return 0;
}
출력: 

#include <stdio.h>
int main() {
    int a = 33;
    printf("%d %d\n", a >> 1, a / 2);
    return 0;
}		
출력: 






#include <stdio.h>
typedef int llong;
int fn(int base, int exp){
	llong base2;
	int i = 0;
	if(exp == 1){
		return base;
	} else if(base == 0){
		return 1;
	}
	if(exp % 2 == 0){
		base2 = fn(base, exp/2);
		return base2*base2;
	} else {
		base2 = fn(base, (exp-1)/2);		
		return (base2*base2)*base2;
	}
}
int main() {
	llong result = fn(3, 3);
	printf("%d\n", result);
	return 0;
}
출력 : 






★★★
#include <stdio.h>
int main() {
	float a = 3.14;
	printf("%.2f\n", a);
	printf("%5.1f\n", a);
	printf("%05.1f\n", a);
	printf("%-05.1f\n", a);
	return 0;
}
출력 :






★★★
x가 100번지이고, int는 4바이트 일 때 출력
#include <stdio.h>
int main() {
	int x[10][10] = {0};
	int (*p)[10] = x;
	int *q = x[4];
	p++;
	q--;
	printf("%d %d", p, q);
	return 0;
}
출력 : 






★★★
#include <stdio.h>
#include <string.h>
char n[10];
char *soojebi(){
	static int i = 0;
	switch(i){
	case 0: strncpy(n, "임꺽정", 10); break;
	case 1: strncpy(n, "장길산", 10); break;
	default: strncpy(n, "홍길동", 10); 
	}
	i++;
	return n;
}
int main() {
	char* p1 = soojebi();
	char* p2 = soojebi();
	char* p3 = soojebi();
	printf("%s\n", p1);
	printf("%s\n", p2);
	printf("%s\n", p3);
	return 0;
}
출력 : 







5개의 숫자 중 홀수의 개수가 몇 개 인지 알려주는 코드로, 밑줄에 들어갈 코드는?
#include <stdio.h>
int main() {
	int i, cnt=0;
	int arr[5];
	for(i=0;i<5;i++){
		scanf("%d", &arr[i]);
	}
	for(i=0;i<5;i++){
		if(arr[i] % 2 ___ 0){		 
			cnt = cnt + 1;
		}
	}
	printf("%d", cnt);
	return 0;
}







#include <stdio.h>
int main(){
	int a = 5, b = 10, c = 15;
	int *arr[3] = {&a, &b, &c};
	int **ptr = arr;
	printf("%d\n", *ptr[0] + *(arr[1]) - **(ptr+2));
	return 0;
}
출력 :







#include <stdio.h>
struct Node {
	int value;
	struct Node* next;
};
void func(struct Node* node){								n1			
	while(node != NULL && node->next != NULL){				true && true		
		int t = node->value;								t = 1
		node->value = node->next->value;					3
		node->next->value = t;								1
		node = node->next->next;							n2
	}
}
int main(){
	struct Node n1 = {1, NULL};
	struct Node n2 = {2, NULL};
	struct Node n3 = {3, NULL};
	n1.next = &n3;
	n3.next = &n2;
	func(&n1);
	struct Node* current = &n1;
	while(current != NULL){
		printf("%d", current->value);						
		current = current->next;
	}
	return 0;
}
출력 : 







★★★
#include <stdio.h>
#include <string.h>
int soojebi(char* p, int size){			
	int i;
	for(i=0; i<size; i++)				
		if(i%4 == 0)					
			printf("%c", *p);			
	return 1;
}
int main(){
	char* p = "hello soojebi";
	soojebi(p, strlen(p));
	return 0;
}
출력 : 






★★★
#include <stdio.h>
int main(){
	char arr[30];
	gets(arr);
	printf("puts>");
	puts(arr);
	return 0;
}
입력 : soojebi
출력 : 





★★★
#include <stdio.h>
int main(){
	int a[2][2] = {{11, 22}, {44, 55}};
	int i, sum = 0;
	int *p = a[0];
	int length = sizeof(a)/sizeof(a[0]);		
	for(i=1; i<length; i++)						
		sum += *(p+i);							
	printf("%d", sum);
	return 0;
}
출력 :







#include <stdio.h>
int soojebi(char* x){
	int count = 0, i;
	char words[] = "aeiou";
	while(*x){
		for(i=0; i<5; i++){
			if(*x == words[i]){		
				count++;			
				break;
			}
		}
		x++;
	}
	return count;
}
int main(){
	char str[] = "sooje";
	int result = soojebi(str);
	printf("%d\n", result);
	return 0;
}
출력 : 






★★★
#include <stdio.h>
int fn(char* a){
	int i = 0;
	for(i=0; a[i] != '\0'; i++);	
	return i;
}
int main(){
	char a[10] = "Hello";
	printf("%d", fn(a));
	return 0;
}
출력 : 







★★★
빈 칸에 들어갈 코드는 ?
#include <stdio.h>
#define MAX_SIZE 10
int stack[MAX_SIZE];
int top = -1;
void push(int item){
	if(top >= _____)
		printf("stack is full\n");
	else
		stack[++top] = item;
}
int pop(){
	if(top == _____){
		printf("stack is empty\n");
		return -1;
	}
	return stack[top--];
}
int is_empty(){
	if(top == -1)
		return 1;
	else
		return 0;
}
int is_full(){
	if(top >= MAX_SIZE)
		return 1;
	else
		return 0;
}
int main(){
	push(20);
	push(30);
	push(40);
	while(!is_empty()){
		printf("value = %d\n", pop());
	}
	return 0;
}
출력결과 : 	value = 40
			value = 30
			value = 20
			
			
			
			
			
			
★★★
#include <stdio.h>
#include <stdlib.h>
void set(int** arr, int* data, int rows, int cols) {
    for (int i = 0; i < rows * cols; ++i) {
        arr[((i + 1) / rows) % rows][(i + 1) % cols] = data[i];
    }
}
int main() {
    int rows = 3, cols = 3, sum = 0;
    int data[] = {5, 2, 7, 4, 1, 8, 3, 6, 9}; 
    int** arr;
    arr = (int**) malloc(sizeof(int*) * rows);
    for (int i = 0; i < cols; i++) {
        arr[i] = (int*) malloc(sizeof(int) * cols);
    }
    set(arr, data, rows, cols);
    for (int i = 0; i < rows * cols; i++) {
        sum += arr[i / rows][i % cols] * (i % 2 == 0 ? 1 : -1);
    }
    for(int i=0; i<rows; i++) {
        free(arr[i]);
    }
    free(arr);
    printf("%d", sum);
}








★★★
#include <stdio.h>   
#include <stdlib.h>  
typedef struct Data {
    int value;
    struct Data *next;
} Data;
Data* insert(Data* head, int value) {										
    Data* new_node = (Data*)malloc(sizeof(Data));
    new_node->value = value;									
    new_node->next = head;										
    return new_node;
}
Data* reconnect(Data* head, int value) {							
    if (head == NULL || head->value == value) return head;			
    Data *prev = NULL, *curr = head;								
    while (curr != NULL && curr->value != value) {				
        prev = curr;
        curr = curr->next;
    }
    if (curr != NULL && prev != NULL) {
        prev->next = curr->next;							
        curr->next = head;									
        head = curr;										
    }
    return head;
}
int main() {
    Data *head = NULL, *curr;
    for (int i = 1; i <= 5; i++)
        head = insert(head, i);										
    head = reconnect(head, 3);										
    for (curr = head; curr != NULL; curr = curr->next)
        printf("%d", curr->value);
    return 0; 
}
출력 :








#include <stdio.h>
typedef struct student {
    char* name;
    int score[3];
} Student;
int dec(int enc) {																	
    return enc & 0xA5;
}
int sum(Student* p) {																
    return dec(p->score[0]) + dec(p->score[1]) + dec(p->score[2]);
}
int main() {
    Student s[2] = { "Kim", {0xA0, 0xA5, 0xDB}, "Lee", {0xA0, 0xED, 0x81} };
    Student* p = s;
    int result = 0;
    for (int i = 0; i < 2; i++) {
        result += sum(&s[i]);
    }
    printf("%d", result);
    return 0;
}
출력 : 





★★★
include <stdio.h>
#define SIZE 3
typedef struct {
    int a[SIZE];
    int front;
    int rear;
} Queue;
void enq(Queue* q, int val){
    q->a[q->rear] = val; 				
    q->rear = (q->rear + 1) % SIZE;		
}
int deq(Queue* q) {						
    int val = q->a[q->front];									
    q->front = (q->front + 1) % SIZE;							
    return val;													
}
int main() {
    Queue q = {{0}, 0, 0};
    enq(&q,1); enq(&q,2); deq(&q); enq(&q, 3);
    int first = deq(&q);							
    int second = deq(&q);							
    printf("%d 그리고 %d", first, second);			
    return 0;
}





★★★
#include <stdio.h>
#include <stdlib.h>
struct node {
    char c;
    struct node* p;
};
struct node* func(char* s) {
    struct node* h = NULL, *n;
    while(*s) {												
        n = malloc(sizeof(struct node));				
        n->c = *s++;									
        n->p = h;										
        h = n;											
    }
    return h;
}
int main() {
    struct node* n = func("BEST");
    while(n) {											
        putchar(n->c);								
        struct node* t = n;					
        n = n->p;							
        free(t);							
    }
    return 0;
}
